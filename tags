!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/wugs/cprogram/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	//
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
BDRY_MASK	testcpp.cpp	/^namespace BDRY_MASK {$/;"	n	file:
BLUE	testcpp.cpp	/^        BLUE,   \/\/ 1$/;"	e	enum:main::Color	file:
BdryEdge	testcpp.cpp	/^typedef int BdryEdge[3];$/;"	t	typeref:typename:int[3]	file:
Btype	testcpp.cpp	/^typedef unsigned short Btype;$/;"	t	typeref:typename:unsigned short	file:
CalcChebyshev	testcpp.cpp	/^void CalcChebyshev(const int p, const double x, RealVec &u)$/;"	f	typeref:typename:void
CalcChebyshev	testcpp.cpp	/^void CalcChebyshev(const int p, const double x, RealVec &u, RealVec &d, RealVec &dd)$/;"	f	typeref:typename:void
CalcLegendre	testcpp.cpp	/^void CalcLegendre(const int p, const double x, RealVec &u)$/;"	f	typeref:typename:void
CalcLegendre	testcpp.cpp	/^void CalcLegendre(const int p, const double x, RealVec &u, RealVec &d)$/;"	f	typeref:typename:void
Color	testcpp.cpp	/^    enum Color {$/;"	g	function:main	file:
Coord	testcpp.cpp	/^typedef double Coord[3];$/;"	t	typeref:typename:double[3]	file:
DIRICHLET	testcpp.cpp	/^        DIRICHLET = 8,$/;"	e	enum:BDRY_MASK::__anon255f4fb90103	file:
ELEM_TYPE	testcpp.cpp	/^namespace ELEM_TYPE {$/;"	n	file:
Edge	testcpp.cpp	/^typedef int Edge[2];$/;"	t	typeref:typename:int[2]	file:
GREEN	testcpp.cpp	/^        GREEN = 5$/;"	e	enum:main::Color	file:
INTERIOR	testcpp.cpp	/^        INTERIOR = 1,$/;"	e	enum:BDRY_MASK::__anon255f4fb90103	file:
NEUMANN	testcpp.cpp	/^        NEUMANN = 16$/;"	e	enum:BDRY_MASK::__anon255f4fb90103	file:
OWNER	testcpp.cpp	/^        OWNER = 2,$/;"	e	enum:BDRY_MASK::__anon255f4fb90103	file:
PHG_MIN_VERBOSE_LEVEL	testcpp.cpp	/^#define PHG_MIN_VERBOSE_LEVEL /;"	d	file:
QUAD	testcpp.cpp	/^        QUAD$/;"	e	enum:ELEM_TYPE::__anon255f4fb90203	file:
QUAD_2D_Q7_pts	testcpp.cpp	/^static double QUAD_2D_Q7_pts[] = {$/;"	v	typeref:typename:double[]	file:
QUAD_2D_Q7_wts	testcpp.cpp	/^static double QUAD_2D_Q7_wts[] = {$/;"	v	typeref:typename:double[]	file:
Quad1d	testcpp.cpp	/^class Quad1d {$/;"	c	file:
Quad2d	testcpp.cpp	/^class Quad2d {$/;"	c	file:
Quad2d_tria	testcpp.cpp	/^class Quad2d_tria {$/;"	c	file:
RED	testcpp.cpp	/^        RED,    \/\/ 0$/;"	e	enum:main::Color	file:
REMOTE	testcpp.cpp	/^        REMOTE = 4,$/;"	e	enum:BDRY_MASK::__anon255f4fb90103	file:
Real	testcpp.cpp	/^typedef double Real;$/;"	t	typeref:typename:double	file:
RealMat	testcpp.cpp	/^using RealMat = Eigen::MatrixXd;$/;"	t	typeref:typename:Eigen::MatrixXd	file:
RealVec	testcpp.cpp	/^using RealVec = Eigen::VectorXd;$/;"	t	typeref:typename:Eigen::VectorXd	file:
TRIA	testcpp.cpp	/^        TRIA,$/;"	e	enum:ELEM_TYPE::__anon255f4fb90203	file:
YELLOW	testcpp.cpp	/^        YELLOW, \/\/ 2$/;"	e	enum:main::Color	file:
__anon255f4fb90103	testcpp.cpp	/^    enum {$/;"	g	namespace:BDRY_MASK	file:
__anon255f4fb90203	testcpp.cpp	/^    enum {$/;"	g	namespace:ELEM_TYPE	file:
compare_bdry_edge	testcpp.cpp	/^int compare_bdry_edge(const void *p0, const void *p1)$/;"	f	typeref:typename:int
compare_edge	testcpp.cpp	/^int compare_edge(const void *p0, const void *p1)$/;"	f	typeref:typename:int
func1d	testcpp.cpp	/^double func1d(double x) {$/;"	f	typeref:typename:double
func2d	testcpp.cpp	/^double func2d(double x, double y) {$/;"	f	typeref:typename:double
func_u	testcpp.cpp	/^double func_u(double x, double y) {$/;"	f	typeref:typename:double
get_token	testc.c	/^bool get_token(FILE *fp, char *token)$/;"	f	typeref:typename:bool
main	testc.c	/^int main(int argc, char* argv[]) {$/;"	f	typeref:typename:int
main	testcpp.cpp	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
phgInfo	testcpp.cpp	/^void phgInfo(int verbose_level, const char *fmt, ...) $/;"	f	typeref:typename:void
points	testcpp.cpp	/^        double points[2] = {(1-1\/sqrt(3))\/2, (1+1\/sqrt(3))\/2};$/;"	m	class:Quad1d	typeref:typename:double[2]	file:
points	testcpp.cpp	/^        double points[3][2] = {$/;"	m	class:Quad2d_tria	typeref:typename:double[3][2]	file:
points	testcpp.cpp	/^        double points[4][2] = {$/;"	m	class:Quad2d	typeref:typename:double[4][2]	file:
quad1d	testcpp.cpp	/^        Quad1d quad1d;$/;"	m	class:Quad2d	typeref:typename:Quad1d	file:
ref2phy	testcpp.cpp	/^void ref2phy(const Coord &ref_coord, Coord &phy_coord) {$/;"	f	typeref:typename:void
w1	testcpp.cpp	/^static double w1 = 0.347854845137454;$/;"	v	typeref:typename:double	file:
w2	testcpp.cpp	/^static double w2 = 0.652145154862546;$/;"	v	typeref:typename:double	file:
w3	testcpp.cpp	/^static double w3 = 0.652145154862546;$/;"	v	typeref:typename:double	file:
w4	testcpp.cpp	/^static double w4 = 0.347854845137454;$/;"	v	typeref:typename:double	file:
weights	testcpp.cpp	/^        double weights[2] = {0.5, 0.5};$/;"	m	class:Quad1d	typeref:typename:double[2]	file:
weights	testcpp.cpp	/^        double weights[3] = {1.0\/6.0, 1.0\/6.0, 1.0\/6.0};$/;"	m	class:Quad2d_tria	typeref:typename:double[3]	file:
weights	testcpp.cpp	/^        double weights[4] = {0.25, 0.25, 0.25, 0.25};$/;"	m	class:Quad2d	typeref:typename:double[4]	file:
x1	testcpp.cpp	/^static double x1 = 0.0694318442029735;$/;"	v	typeref:typename:double	file:
x2	testcpp.cpp	/^static double x2 = 0.330009478207572;$/;"	v	typeref:typename:double	file:
x3	testcpp.cpp	/^static double x3 = 0.669990521792428;$/;"	v	typeref:typename:double	file:
x4	testcpp.cpp	/^static double x4 = 0.930568155797027;$/;"	v	typeref:typename:double	file:
